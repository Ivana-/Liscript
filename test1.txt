(printLn "ЗАДАЧА - макросы, бесконечные списки - потоки:")

(defn memo-proc (proc)
    (def already-run? False) (def result False)
    (lambda ()
        (cond (already-run?) result
              (begin (set! result (proc)) (set! already-run? True) result))))

--(defmacro memo-proc (proc)
    (def already-run? False) (def result False)
    (lambda ()
        (cond (already-run?) result
              (begin (set! result (proc)) (set! already-run? True) result))))

-- макрос отложенных вычислений, возвращает нульарную лямбду
-- НЕ мемоизированный delay
(defmacro delay (expr) (lambda () expr))
-- мемоизированный delay
--(defmacro delay (expr) (memo-proc (lambda () expr)))

-- функция их возобновления, удачное сочетание скобок:
-- если передадим нульарную лямбду - вычислит ее,
-- если другое значение - просто вернет его
(defn force (promise) (promise))

(def a (delay (+ 7 6)))
(printLn "")
(print "запомнили отложенное вычисление: ") (printLn a)
(print "вычислили результат: ") (printLn (force a))

-- макрос-конструктор потока, чтобы delay каждый раз не писать
(defmacro s-cons (x y) (cons x (delay y)))
-- функция берет хвост потока - если функция, то вычисляет ее,
-- воспринимая, как порождающую поток. Плохо, функции в поток не засунешь.
(defn s-tail (stream)
    (def h (car (cdr stream)))
    (cond (atom? h) (cdr stream) (force h)))

-- поток натуральных чисел, начиная с заданного
(defn int-from (n) (s-cons n (int-from (+ n 1))))
(def nats (int-from 1))
(printLn "")
(print "поток натуральных чисел с 1: ") (printLn nats)
(print "хвост этого потока         : ") (printLn (s-tail nats))

-- потоковые аналоги списковых функций
(defn s-take (n l)
    (cond (null? l) nil
          (> n 0) (cons (car l) (s-take (- n 1) (s-tail l)))
          nil))
(defn stream-ref (n s) (cond (= 0 n) (car s) (stream-ref (- n 1) (s-tail s))))
(defn s-map (f s) (s-cons (f (car s)) (s-map f (s-tail s))))
(defn s-filter (f s)
    (cond (f (car s)) (s-cons (car s) (s-filter f (s-tail s)))
                                      (s-filter f (s-tail s))))
(defn s-zipwith (f s1 s2)
    (s-cons (f (car s1) (car s2)) (s-zipwith f (s-tail s1) (s-tail s2))))
(defn s-sum (s1 s2) (s-zipwith + s1 s2))

(printLn "первые 15 членов потока - суммы потоков чисел с 0 и со 100: ")
(printLn (s-take 15 (s-sum (int-from 0) (int-from 100))))

-- поток Фибоначчи - нульарная функция
-- НЕ экспоненциальный расчет
(defn fibgen (a b) (s-cons a (fibgen b (+ a b))))
(def fibs (fibgen 0 1))
(printLn "")
(printLn "первые 25 членов потока ряда Фибоначчи:")
(printLn (s-take 25 fibs))

-- экспоненциальный расчет
-- первый конс обычный, второй - потоковый отложенный, через макрос
(defn fibsexp () (cons 0 (s-cons 1 (s-sum (s-tail (fibsexp)) (fibsexp)))))
(printLn "")
(printLn "первые 10 членов потока ряда Фибоначчи:")
(printLn (s-take 10 (fibsexp)))

-- поток четных чисел
(def evens (s-filter (lambda (x) (= 0 (mod x 2))) (int-from 0)))
(printLn "")
(printLn "первые 15 четных чисел:")
(printLn (s-take 15 evens))

(def n 20)
-- решето Эратосфена, поток простых чисел
(defn sieve (s)
    (def r (s-filter (lambda (x) (/= 0 (mod x (car s)))) (s-tail s)))
    (s-cons (car s) (sieve r)))
(def primes-Erat (sieve (int-from 2)))
(printLn "")
(printLn (str "первые" n "простых чисел через решето Эратосфена:"))
(printLn (s-take n primes-Erat))

-- поток простых чисел через гипотезу Бертрана
(def primes-Bert (s-cons 2 (s-filter prime? (int-from 3))))
(defn prime? (n)
    (defn square (n) (* n n))
    (defn iter (ps)
        (cond (> (square (car ps)) n) True
              (= 0 (mod n (car ps))) False
              (iter (s-tail ps))))
    (iter primes-Bert))
(printLn "")
(printLn (str "первые" n "простых чисел через гипотезу Бертрана:"))
(printLn (s-take n primes-Bert))

-- поток частичных сумм любого потока
(defn partial-sums (f s)
    (defn go (a s) (s-cons (f a (car s)) (go (f a (car s)) (s-tail s))))
    (go 0 s))
(printLn "")
(printLn "частичные суммы натурального ряда:")
(printLn (s-take 20 (partial-sums + (int-from 1))))

-- мердж и числа Хэмминга
(defn merge (s1 s2)
    (cond (null? s1) s2
          (null? s2) s1
          (< (car s1) (car s2)) (s-cons (car s1) (merge (s-tail s1) s2))
          (> (car s1) (car s2)) (s-cons (car s2) (merge s1 (s-tail s2)))
                                (s-cons (car s1) (merge (s-tail s1) (s-tail s2)))))
(defn s-scale (k s) (s-map (lambda (x) (* k x)) s))
(defn hamm () (s-cons 1 (merge (s-scale 2 (hamm))
    (merge (s-scale 3 (hamm)) (s-scale 5 (hamm))) )))
(printLn "")
(printLn "числа Хэмминга:")
(printLn (s-take 30 (hamm)))

-- интегрирование потоков - степенных рядов
(defn s-integrate (s)
    (defn go (n s) (s-cons (/' (car s) n) (go (+ n 1) (s-tail s))))
    (go 1 s))
(defn s-exp () (s-cons 1 (s-integrate (s-exp))))
(printLn "")
(printLn "ряд частичных сумм экспоненты от 1:")
(printLn (s-take 8 (partial-sums +' (s-exp))))

--(defn s-cos ()
    (def -s-sin (s-scale -1 (s-sin)))
    (s-cons 1 (s-integrate -s-sin)))
--(defn s-sin () (s-cons 0 (s-integrate (s-cos))))
--(printLn "ряд синуса 1:")
--(printLn (s-take 10 (partial-sums +' (s-sin))))
--(printLn "ряд косинуса 1:")
--(printLn (s-take 10 (partial-sums +' (s-cos))))

-- поток приближений квадратного корня
(defn average (x y) (/' (+' x y) 2))
(defn sqrt-improve (guess x) (average guess (/' x guess)))
(defn sqrt-stream (x)
    (defn r () (s-map (lambda (guess) (sqrt-improve guess x)) (sqrt-stream x)))
    (s-cons 1 (r)))
(printLn "")
(printLn "ряд приближений к квадратному корню из 16:")
(printLn (s-take 8 (sqrt-stream 16)))

-- приближение к числу пи
(defn pi-summands (n)
    (defn r () (s-map (lambda (x) (-' 0 x)) (pi-summands (+ n 2))))
    (s-cons (/' 1 n) (r)))
(defn s-scale' (k s) (s-map (lambda (x) (*' k x)) s))
(def pi-stream (s-scale' 4 (partial-sums +' (pi-summands 1))))
(printLn "")
(printLn "ряд приближений к числу пи:")
(printLn (s-take 5 pi-stream))

-- трансформация Эйлера - ускоритель сходимости ряда
(defn euler-transform (s)
    (defn square (x) (*' x x))
    (def s0 (stream-ref 0 s))
    (def s1 (stream-ref 1 s))
    (def s2 (stream-ref 2 s))
    (s-cons (-' s2 (/' (square (-' s2 s1)) (+' s0 (*' -2 s1) s2))) (euler-transform (s-tail s))))
(printLn "")
(printLn "ряд приближений к числу пи - однократное применение Эйлера:")
(printLn (s-take 5 (euler-transform pi-stream)))

--(defn euler-transform-n (n s) (ntimes n euler-transform s))
--(printLn (s-take 10 (euler-transform-n 3 pi-stream)))

(defn make-tableau (t s) (s-cons s (make-tableau t (t s))))
--(printLn (s-take 3 (make-tableau euler-transform pi-stream)))
(defn accelerated-sequence (s) (s-map car (make-tableau euler-transform s)))
(printLn "")
(printLn "ряд приближений к числу пи - последовательное применение Эйлера:")
(printLn (s-take 4 (accelerated-sequence pi-stream)))

--(defn integral (delayed-integrand initial-value dt)
    (defn int () (s-cons initial-value
        (s-zipwith +' (s-scale' dt (force delayed-integrand)) (int))))
    (int))
--(defn solve (f y0 dt)
    (defn y  () (integral (delay (dy)) y0 dt))
    (defn dy () (s-map f (y)))
    (y))
--(printLn (stream-ref 10 (solve (lambda (y) y) 1 0.01)))
(printLn "")
