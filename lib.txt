(def nil '())
--(defn null? (l) (eq? l nil))
(def null? (macro (l) (eq? l nil)))

(defn list-from-to (a b)
    (defn go (i) (cond (<= i b) (cons i (go (+ i 1))) True nil))
    (go a))
(defn list-ref (n l) (cond (= 0 n) (car l) (list-ref (- n 1) (cdr l))))

(defn length (l) (cond (null? l) 0 (+ 1 (length (cdr l)))))
(defn append (l1 l2) (cond (null? l1) l2 (cons (car l1) (append (cdr l1) l2))))

(defn take (n l)
    (cond (null? l) nil
          (> n 0) (cons (car l) (take (- n 1) (cdr l)))
          nil))

(defn drop (n l)
    (cond (null? l) nil
          (> n 0) (drop (- n 1) (cdr l))
          l))

(defn foldl (f a l)
    (cond (null? l) a
          (foldl f (f (car l) a) (cdr l))))

(defn foldr (f a l)
    (cond (null? l) a
          (f (car l) (foldr f a (cdr l)))))

(defn unfold (a p f) (cond (p a) nil (cons a (unfold (f a) p f))))

(defn reverse (l) (foldl cons nil l))
(defn elem   (x l) (cond (null? l) False (eq? x (car l)) True (elem x (cdr l))))
(defn noelem (x l) (cond (null? l) True (eq? x (car l)) False (noelem x (cdr l))))

(defn any (f l) (cond (null? l) False (f (car l)) True (any f (cdr l))))
(defn all (f l) (cond (null? l) True (f (car l)) (all f (cdr l)) False))

(defn span (f l)
    (defn go (l1 l2)
        (cond (null? l2)   (cons (reverse l1) (cons l2 nil))
              (f (car l2)) (cons (reverse l1) (cons l2 nil))
                           (go (cons (car l2) l1) (cdr l2))))
    (go nil l))

(defn zipwith (f l1 l2)
    (cond (null? l1) nil (null? l2) nil
          (cons (f (car l1) (car l2)) (zipwith f (cdr l1) (cdr l2)))))

(defn filter (f l)
    (defn go (a l)
        (cond (null? l) a
              (f (car l)) (cons (car l) (go a (cdr l)))
              (go a (cdr l))))
    (go nil l))

(defn map (f l) (cond (null? l) nil (cons (f (car l)) (map f (cdr l)))))

(defn nub (l) (cond (null? l) nil
    (cond (elem (car l) (cdr l)) (nub (cdr l)) (cons (car l) (nub (cdr l))))))

(defn concat (l) (cond (null? l) nil (append (car l) (concat (cdr l)))))

(defn mapa (f l)
    (cond (atom? l) (f l)
          (null? l) nil
          (cons (mapa f (car l)) (mapa f (cdr l)))))

(defn tolist (x) (cond (list? x) x (cons x nil)))
(defn inl (x) (cons x nil))
(defn ntimes (n f x) (cond (= n 0) x (ntimes (- n 1) f (f x))))
(defn inln (n x) (ntimes n inl x))
(defn not (x) (cond x False True))

(defn flatten (l)
    (defn go (r l)
        (cond (atom? l) l
              (null? l) nil
              (append (tolist (go r (car l))) (tolist (go r (cdr l))))))
    (go nil l))

("Ok, module loaded: listlib 1.0")
